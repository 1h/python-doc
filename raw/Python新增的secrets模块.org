#+TITLE: Python新增的secrets模块
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2017-03-23 四 14:36]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

#+URL: http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/


Python 3.6 added a new module called secrets that is designed “to provide an
obvious way to reliably generate cryptographically strong pseudo-random values
suitable for managing secrets, such as account authentication, tokens, and
similar”. Python’s random module was never designed for cryptographic use but
for modeling and simulation. Of course, you could always use the urandom()
function from Python’s os module:

#+BEGIN_SRC python
  >>> import os
  >>> os.urandom(8)
  '\x9c\xc2WCzS\x95\xc8'
#+END_SRC

But now that we have the secrets module, we can create our own
“cryptographically strong pseudo-random values”. Here’s a simple example:

#+BEGIN_SRC python
  >>> import secrets
  >>> import string
  >>> characters = string.ascii_letters + string.digits
  >>> bad_password = ''.join(secrets.choice(characters) for i in range(8))
  >>> bad_password
  'SRvM54Z1'
#+END_SRC

In this example, we import the secrets and the string modules. Next we create
a string of uppercase letters and integers. Finally we use the secrets
module’s choice() method to choose characters randomly to generate a bad
password. The reason I am calling this a bad password is because we aren’t
adding symbols to the password. This is actually a fairly decent one compared
with what a lot of people use. One of my readers pointed out that another
reason this could be considered bad is that the user would probably just write
it down on a piece of paper. While that may be true, using dictionary words is
typically strongly discouraged so you should learn to use passwords like this
or invest in a secure password manager.

------------------------------------------------------------------------------

* Generating Tokens with secrets

The secrets module also provides several methods of generating tokens. Here
are some examples:

#+BEGIN_SRC python
  >>>: secrets.token_bytes()
  b'\xd1Od\xe0\xe4\xf8Rn</U\xf4G\xdb\x08\xa8\x85\xeb\xba>\x8cO\xa7XV\x1cb\xd6\x11\xa0\xcaK'
 
  >>> secrets.token_bytes(8)
  b'\xfc,9y\xbe]\x0e\xfb'
 
  >>> secrets.token_hex(16)
  '6cf3baf51c12ebfcbe26d08b6bbe1ac0'
 
  >>> secrets.token_urlsafe(16)
  '5t_jLGlV8yp2Q5tolvBesQ'
#+END_SRC

The =token_bytes= function will return a random byte string containing nbytes
number of bytes. I didn’t supply a number of bytes in the first example, so
Python chose a reasonable number for me. Then I tried calling it again and
asking for 8 bytes. The next function we tried is =token_hex=, which will return
a random string in hexadecimal. The last function is =token_urlsafe= which will
return a random URL-safe text string. The text is Base64 encoded too! Note
that in practice you should probably use at least 32 bytes for your tokens for
them to be secure against a brute-force attack ([[https://docs.python.org/3.6/library/secrets.html#how-many-bytes-should-tokens-use][source]]).

------------------------------------------------------------------------------

* Wrapping Up

The secrets module is a worthy addition to Python. Frankly I thought something
like this should have been added a long time ago. But at least now we have it
and now we can safely generate cryptographically strong tokens and passwords.
Take some time to check out the documentation for this module as it has a few
fun recipes to play around with.

------------------------------------------------------------------------------

Related Readings

  * The secrets module [[https://docs.python.org/3.6/library/secrets.html][documentation]]
  * What’s new in Python 3.6: [[https://docs.python.org/3.6/library/secrets.html#module-secrets][secrets module]]
  * PEP 506 — [[https://www.python.org/dev/peps/pep-0506/][Adding A Secrets Module To The Standard Library]]

[[http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/][Print Fr]]

Post navigation

[[http://www.blog.pythonlibrary.org/2017/02/14/whats-new-in-python-asynchronous-comprehensions-generators/][← What’s New in Python: Asynchronous Comprehensions / Generators]] [[http://www.blog.pythonlibrary.org/2017/02/20/pydev-of-the-week-petr-viktorin/][PyDev of the]]
[[http://www.blog.pythonlibrary.org/2017/02/20/pydev-of-the-week-petr-viktorin/][Week: Petr Viktorin →]]

  * Eugene J Callahan
   
    “The reason I am calling this a bad password is because we aren’t using
    mixed case, numbers and symbols in the password. ”
   
    Isn’t the more important reason this is bad that it is impossible to
    remember, and will wind up written down on a post-it in the drawer of the
    person who is trying to use it?
   
  * [[http://www.blog.pythonlibrary.org/][Mike Driscoll]]
   
    While I agree, I do know people that use passwords like this. I use a
    password manager for some websites, although that can be annoying too. I
    updated the article somewhat in response as well.
   
wxPython Cookbook

[[http://gum.co/wxcookbook][wxcookbo]]
                                                                              
                    Order the eBook on [[https://leanpub.com/wxpythoncookbook/][Leanpub]] or [[http://gum.co/wxcookbook][Gumroad]]                     
                                                                              
                        Get the [[http://www.lulu.com/content/hardcover-book/wxpython-cookbook/19892096][Hardcover]] or [[http://www.lulu.com/content/paperback-book/wxpython-cookbook/19844722][Paperback]]                        
                                                                              
Python 201

[[https://gum.co/py201][python201_sm]]
                                                                              
                   Get an eBook copy on [[https://gum.co/py201][Gumroad]] or [[https://leanpub.com/python201][Leanpub]]                    
                                                                              
                              Get the[[http://www.lulu.com/content/paperback-book/python-201-intermediate-python/19144035][Paperback]]                               
                                                                              
Python 101

[[https://gum.co/bppWr][mousecovertitlejpg_s]]
                                                                              
                    Order the eBook on [[https://gum.co/bppWr][Gumroad]] or [[https://leanpub.com/python_101][Leanpub]]                     
                                                                              
                         Also available in[[http://www.lulu.com/shop/michael-driscoll/python-101/paperback/product-21657364.html][Paperback!]]                         
                                                                              
Python 101 + Screencast

[[https://gum.co/kaKNo][{mousecovertitle}]]
                                                                              
                       [[https://gum.co/kaKNo][Get Python 101 + the Screencast]]                        
                                                                              
Buy Python 101

[[https://gum.co/bppWr][mousecovertitlejpg_s]]

[[https://gum.co/bppWr][Order the eBook]]

[[http://www.lulu.com/shop/michael-driscoll/python-101/paperback/product-21657364.html][or buy the Paperback!]]

Screencasts

[[https://gum.co/bppWr][{mousecovertitle}]]

[[https://gum.co/kaKNo][Get the Screencast]]

Search for: [                    ]  Search 
Recent Posts

  * [[http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/][Python 101 Online Course is FREE for 48 Hours!]]
  * [[http://www.blog.pythonlibrary.org/2017/03/20/pydev-of-the-week-paul-moore/][PyDev of the Week: Paul Moore]]
  * [[http://www.blog.pythonlibrary.org/2017/03/18/python-101-an-intro-to-idle/][Python 101 – An Intro to IDLE]]
  * [[http://www.blog.pythonlibrary.org/2017/03/16/python-101-screencast-introspection/][Python 101 Screencast: Introspection]]
  * [[http://www.blog.pythonlibrary.org/2017/03/15/python-101-all-about-dictionaries/][Python 101: All About Dictionaries]]

Links

  * [[http://twitter.com/#!/mousevspython][@MouseVsPython]]
  * [[http://www.zazzle.com/mousevspython][Buy the Shirt!]]
  * [[http://www.python.org][Python]]
  * [[http://www.wxpython.org][wxPython]]

Archives

Archives [Select Month        ]

Recent Comments

  * [[http://www.blog.pythonlibrary.org/][Mike Driscoll]] on [[http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/#comment-217397][Python 101 Online Course is FREE for 48 Hours!]]
  * Preston Baez on [[http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/#comment-217396][Python 101 Online Course is FREE for 48 Hours!]]
  * [[http://forum.aspekindonesia.org/member.php?action=viewpro&member=MitchelVac][ราคากำจัดปลวก]] on [[http://www.blog.pythonlibrary.org/2014/02/26/python-101-reading-and-writing-csv-files/#comment-217395][Python 101: Reading and Writing CSV Files]]
  * [[http://www.blog.pythonlibrary.org/][Mike Driscoll]] on [[http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/#comment-217394][Python 101 Online Course is FREE for 48 Hours!]]
  * Terry on [[http://www.blog.pythonlibrary.org/2017/03/20/python-101-online-course-is-free-for-48-hours/#comment-217393][Python 101 Online Course is FREE for 48 Hours!]]

Tags

[[http://www.blog.pythonlibrary.org/tag/binaries/][binaries]] [[http://www.blog.pythonlibrary.org/tag/book-preview/][Book Preview]] [[http://www.blog.pythonlibrary.org/tag/book-review/][Book Review]] [[http://www.blog.pythonlibrary.org/tag/books/][Books]] [[http://www.blog.pythonlibrary.org/tag/concurrency/][concurrency]] [[http://www.blog.pythonlibrary.org/tag/configobj/][ConfigObj]] [[http://www.blog.pythonlibrary.org/tag/cross-platform/][Cross-Platform]] 
[[http://www.blog.pythonlibrary.org/tag/distribution/][Distribution]] [[http://www.blog.pythonlibrary.org/tag/django/][Django]] [[http://www.blog.pythonlibrary.org/tag/education/][Education]] [[http://www.blog.pythonlibrary.org/tag/gui/][GUI]] [[http://www.blog.pythonlibrary.org/tag/ironpython/][IronPython]] [[http://www.blog.pythonlibrary.org/tag/kivy/][kivy]] [[http://www.blog.pythonlibrary.org/tag/packaging/][Packaging]] [[http://www.blog.pythonlibrary.org/tag/pycon/][PyCon]] [[http://www.blog.pythonlibrary.org/tag/pycon-2010/][PyCon 2010]] 
[[http://www.blog.pythonlibrary.org/tag/pycon-2011/][PyCon 2011]] [[http://www.blog.pythonlibrary.org/tag/pycon-2012/][PyCon 2012]] [[http://www.blog.pythonlibrary.org/tag/pyowa/][Pyowa]] [[http://www.blog.pythonlibrary.org/tag/pypdf/][PyPDF]] [[http://www.blog.pythonlibrary.org/tag/pyqt/][PyQT]] [[http://www.blog.pythonlibrary.org/tag/pyside/][PySide]] [[http://www.blog.pythonlibrary.org/tag/python/][Python]] [[http://www.blog.pythonlibrary.org/tag/python-3/][Python 3]] [[http://www.blog.pythonlibrary.org/tag/python-101/][Python 101]] 
[[http://www.blog.pythonlibrary.org/tag/python-201/][Python 201]] [[http://www.blog.pythonlibrary.org/tag/python-advocacy/][Python Advocacy]] [[http://www.blog.pythonlibrary.org/tag/python-pdf-series/][Python PDF Series]] [[http://www.blog.pythonlibrary.org/tag/python-web-frameworks/][Python Web Frameworks]] [[http://www.blog.pythonlibrary.org/tag/pywin32/][PyWin32]] 
[[http://www.blog.pythonlibrary.org/tag/reportlab/][Reportlab]] [[http://www.blog.pythonlibrary.org/tag/sizer/][sizer]] [[http://www.blog.pythonlibrary.org/tag/sql/][SQL]] [[http://www.blog.pythonlibrary.org/tag/sqlalchemy/][SqlAlchemy]] [[http://www.blog.pythonlibrary.org/tag/sqlite/][sqlite]] [[http://www.blog.pythonlibrary.org/tag/system-admin/][System Admin]] [[http://www.blog.pythonlibrary.org/tag/testing/][Testing]] [[http://www.blog.pythonlibrary.org/tag/threading/][threading]] [[http://www.blog.pythonlibrary.org/tag/threads/][Threads]] 
[[http://www.blog.pythonlibrary.org/tag/tkinter/][Tkinter]] [[http://www.blog.pythonlibrary.org/tag/turbogears/][TurboGears]] [[http://www.blog.pythonlibrary.org/tag/windows/][Windows]] [[http://www.blog.pythonlibrary.org/tag/wxpython/][wxPython]] [[http://www.blog.pythonlibrary.org/tag/xml/][XML]] [[http://www.blog.pythonlibrary.org/tag/xml-parsing-series/][XML Parsing Series]]

Members

  * [[http://www.blog.pythonlibrary.org/wp-login.php][Log in]]
  * [[http://www.blog.pythonlibrary.org/feed/][Entries RSS]]
  * [[http://www.blog.pythonlibrary.org/comments/feed/][Comments RSS]]
  * [[https://wordpress.org/][WordPress.org]]

[[https://wordpress.org/][Proudly powered by WordPress]]


